#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

SYN = 'SYN'
ACK = 'ACK'
FIN = 'FIN'

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

class Receiver:

    def __init__(self):
        self.msg_size = 1500
        # Set up the socket
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # Bind to localhost and an ephemeral port
        self.sock.bind(("127.0.0.1", 0))
        self.sock.settimeout(30)
        log("[bound] " + str(self.sock.getsockname()[1]))
        self.sequence = 0
        self.received_packets = {}
        self.ooo_acks = {} # out of order acks

    def inc_seq(self, data_seq, data_len):
        """increment sequnece and keep as unsigned 32 bits
        """
        next_seq = data_seq + data_len
        for seq in sorted(self.ooo_acks.keys()):
            if seq == next_seq:
                next_seq = seq + self.ooo_acks[seq]
                del self.ooo_acks[seq]
            else:
                break
        self.sequence = next_seq % 2**32

    def make_header(self, is_data, ack, sack):
        """create packet header
        """
        header = '0' if is_data else '1'
        for i in xrange(4):
            header += chr(ack % 256)
            ack /= 256
        for i in xrange(4):
            header += chr(sack % 256)
            sack /= 256
        return header

    def parse_header(self, header):
        """parse header from sender
        """
        is_data = header[0] == '0'
        seq = 0
        for i in xrange(4, 0, -1):
            seq *= 256
            seq += ord(header[i])
        return is_data, seq

    def write_data(self):
        """write data to stdout in order
        """
        for ack_num in sorted(self.received_packets.keys()):
            if ack_num > self.sequence:
                break
            sys.stdout.write(self.received_packets[ack_num])
            del self.received_packets[ack_num]

    def run(self):
        """read data from the sender until no more is sent
        """
        fin = -100
        while True:
            if select.select([self.sock], [], [], 4)[0]:
                (data, addr) = self.sock.recvfrom(self.msg_size)
                is_data, seq = self.parse_header(data[:5])
                data = data[5:]
                data_len = len(data)
                if not is_data:
                    fin = seq
                    data_len = 1
                    log("[recv Fin] " + str(seq) + " (" + str(data_len) + ") ACCEPTED")
                if seq == self.sequence:
                    self.inc_seq(seq, data_len)
                    log("[recv data] " + str(seq) + " (" + str(data_len) + ") ACCEPTED (in-order)")
                    self.received_packets[seq] = data
                elif seq > self.sequence:
                    log("[recv data] " + str(seq) + " (" + str(data_len) + ") ACCEPTED (out-of-order)")
                    self.received_packets[seq] = data
                    self.ooo_acks[seq] = data_len
                else:
                    log("[recv data] " + str(seq) + " (" + str(data_len) + ") IGNORED")
                msg = self.make_header(True, self.sequence,  seq + data_len)
                log("ABOUT TO SEND " + msg)
                if self.sock.sendto(msg, addr) < len(msg):
                    log("[error] unable to fully send packet")
                self.write_data()
            elif self.sequence == fin + 1:
                break

if __name__ == '__main__':
    """run receiver after script is called from command line
    """
    Receiver().run()
