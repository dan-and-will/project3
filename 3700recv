#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

class Receiver:

    def __init__(self):
        self.msg_size = 1500
        # Set up the socket
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        # Bind to localhost and an ephemeral port
        self.sock.bind(("127.0.0.1", 0))
        self.sock.settimeout(30)
        log("[bound] " + str(self.sock.getsockname()[1]))

    def receive_messages(self):
        result = self.sock.recvfrom(self.msg_size)
        if result:
            (data, addr) = result
            try:
                decoded = json.loads(data)
                # If the EOF flag is set, exit
                if (decoded['eof']):
                    log("[completed]")
                    sys.exit(0)
                # If there is data, we accept it and print it out
                if (decoded['data']):
                    # If we receive data, we assume it's in-order
                    # You will need to do much more here
                    log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
                    sys.stdout.write(decoded['data'])
                # Send back an ack to the sender
                msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
                log("ABOUT TO SEND " + msg)
                if self.sock.sendto(msg, addr) < len(msg):
                    log("[error] unable to fully send packet")
            except (ValueError, KeyError, TypeError) as e:
                log("[recv corrupt packet]")
                raise e
        else:
            log("[error] timeout")
            sys.exit(-1)

    def run(self):
        while True:
            self.receive_messages()

if __name__ == '__main__':
    receiver = Receiver()
    receiver.run()
