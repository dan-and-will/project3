#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import time
import datetime
import select
import json


MSG_SIZE = 1500
TIMEOUT = 30

# Bind to localhost and an ephemeral port
UDP_IP = "127.0.0.1"
UDP_PORT = 0
      

class Receiver:

    def __init__(self,ip, port, timeout, msg_size):
        self.msg_size = msg_size
        self.ip = ip
        self.timeout = timeout

        # Set up the socket
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) 
        self.sock.bind((ip, port))
        self.sock.settimeout(timeout)



        self.port = self.sock.getsockname()[1]
        self.log("[bound] " + str(UDP_PORT))

    def receive_messages(self):
        result = self.sock.recvfrom(self.msg_size)

        if result:
            (data, addr) = result

            try: 
                decoded = json.loads(data)

                # If the EOF flag is set, exit
                if (decoded['eof']):
                    self.log("[completed]")
                    sys.exit(0)

                # If there is data, we accept it and print it out
                if (decoded['data']):
                    # If we receive data, we assume it's in-order
                    # You will need to do much more here
                    self.log("[recv data] " + str(decoded['sequence']) + " (" + str(len(decoded['data'])) + ") ACCEPTED (in-order)")
                    sys.stdout.write(decoded['data'])

                # Send back an ack to the sender
                msg = json.dumps({"ack": decoded['sequence'] + len(decoded['data'])})
                self.log("ABOUT TO SEND " + msg)
                if self.sock.sendto(msg, addr) < len(msg):
                    log("[error] unable to fully send packet")

            except (ValueError, KeyError, TypeError) as e:
                self.log("[recv corrupt packet]")
                raise e
        else:
            log("[error] timeout")
            sys.exit(-1)

    def log(self, string):
        sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

    def run(self):
        while True:
            self.receive_messages()

if __name__ == '__main__':
    receiver = Receiver(UDP_IP, UDP_PORT, TIMEOUT, MSG_SIZE)
    receiver.run()
 

