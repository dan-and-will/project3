#!/usr/bin/python -u
#
# CS3700, Spring 2015
# Project 2 Starter Code
#

import sys
import socket
import datetime
import select

def log(string):
    sys.stderr.write(datetime.datetime.now().strftime("%H:%M:%S.%f") + " " + string + "\n")

class send:

    def __init__(self, ip, port):
        self.dest = (ip, port)
        self.data_size = 1467
        self.msg_size = 1500
        self.sequence = 0
        self.in_order_ack = self.sequence
        # Set up the socket
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        self.sock.settimeout(30)
        self.previous_packet = None
        # initialize timeout
        self.RTT = datetime.timedelta(milliseconds=250)
        self.RTO = 2 * self.RTT
        self.in_flight = {}
        self.queued_up = {}
        # initialize congestion window
        self.window = 5 * self.data_size

    def effective_window(self):
        """return how much space is left in the window
        """
        return self.window - (self.sequence - self.in_order_ack)

    def increment_sequence(self, inc):
        """increment sequnece and keep as unsigned 32 bits
        """
        seq = self.sequence + inc
        return seq % 2**32

    def shrink_window(self):
        """shrink window for bad network
        """
        self.window -= self.data_size
        if self.window < self.data_size:
            self.window = self.data_size
        log('SHRUNK TO ' + str(self.window))

    def grow_window(self):
        """grow window for good network
        """
        self.window += self.data_size
        log('GREW TO ' + str(self.window))

    def estimateRTT(self, packet_sent_time):
        """adjust RTT and RTO to network
        """
        self.RTT = ( 9 * self.RTT +  (datetime.datetime.now() - packet_sent_time) ) / 10
        self.RTO = 2 * self.RTT

    def make_header(self, is_data, seq):
        """create packet header
        """
        header = '0' if is_data else '1'
        for i in xrange(4):
            header += chr(seq % 256)
            seq /= 256
        return header

    def parse_header(self, header):
        """parse header from reciever
        """
        is_data = header[0] == '0'
        ack = 0
        sack = 0
        for i in xrange(4, 0, -1):
            ack *= 256
            ack += ord(header[i])
        for i in xrange(8, 4, -1):
            sack *= 256
            sack += ord(header[i])
        return is_data, ack, sack

    def send_packet(self, packet, seq_num):
        """send packet on socket
        """
        if self.sock.sendto(packet, self.dest) < len(packet):
            log("[error] unable to fully send packet")
        else:
            log("[send data] " + str(seq_num) + " (" + str(len(packet)) + ")")

    def send_next_packet(self):
        """read from stdin and create packets to be sent
        """
        data = sys.stdin.read(self.data_size)
        if (len(data) > 0):
            msg = self.make_header(True, self.sequence) + data
            self.sequence = self.increment_sequence(len(data))
            self.in_flight[self.sequence] = (datetime.datetime.now(), msg, False)
            self.send_packet(msg, self.sequence)
            return True
        else:
            msg = self.make_header(False, self.sequence)
            self.in_flight[self.increment_sequence(1)] = (datetime.datetime.now(), msg, False)
            self.send_packet(msg, self.increment_sequence(1))
            log('[send FIN]')
            self.advwnd = 0
            return False

    def handle_timeout(self, ack_num):
        """handle resending messages that have timed out
        """
        msg = self.in_flight[ack_num][1]
        self.send_packet(msg, ack_num)
        self.in_flight[ack_num] = (datetime.datetime.now(), msg, True)
        self.shrink_window()

    def fill_window(self, keep_open):
        """send data until the window is full
        """
        now = datetime.datetime.now()
        #resend timedout packets
        for ack_num in sorted(self.in_flight):
            if now - self.in_flight[ack_num][0] > self.RTO:
                log("[TIMEOUT] " + str(ack_num))
                self.handle_timeout(ack_num)
        # send some new stuff
        while keep_open and self.effective_window() > 0:
            keep_open = self.send_next_packet()
        return keep_open

    def purge_lower_acks(self):
        """remove ve messages that have been cumitively acked
        """
        for seq in self.in_flight.keys():
            if seq < self.in_order_ack:
                del self.in_flight[seq]

    def run(self):
        """send data to receiver until all have been acked
        """
        keep_open = True
        while keep_open or len(self.in_flight):
            keep_open = self.fill_window(keep_open)
            if select.select([self.sock], [], [], 0.1)[0]:
                (data, addr) = self.sock.recvfrom(self.msg_size)
                is_data, ack, sack = self.parse_header(data[:9])
                if is_data:
                    self.in_order_ack = ack
                    self.purge_lower_acks()
                    log("[recv ack] " + str(sack))
                    if sack in self.in_flight:
                        (sent_time, _, is_resent) = self.in_flight[sack]
                        if not is_resent:
                            self.estimateRTT(sent_time)
                        self.grow_window()
                        del self.in_flight[sack]

if __name__ == '__main__':
    """run sender after script is called from command line
    """
    # Bind to localhost and an ephemeral port
    IP_PORT = sys.argv[1]
    UDP_IP = IP_PORT[0:IP_PORT.find(":")]
    UDP_PORT = int(IP_PORT[IP_PORT.find(":")+1:])
    dest = (UDP_IP, UDP_PORT)
    send(UDP_IP, UDP_PORT).run()
